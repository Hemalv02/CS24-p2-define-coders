"use client";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { jwtToken, role } from "@/data/cookieNames";
import { message } from "antd";
import axios from "axios";
import { useEffect, useState } from "react";
import EmptyFillContainer from "../dashboard-componenets/cards/EmptyFillContainer";
import { getCookie } from "@/lib/cookieFunctions";
import { admin } from "@/data/roles";
import { Button } from "../ui/button";
import { apiRoutes, baseUrl } from "@/data/apiRoutes";

type ScheduleEntry = {
  time: string;
  vehicleNumber: string;
  vehicleType: string;
  landFillName: string;
  amount: string;
  duration: string;
};

export function ScheduleByContractor({ date }: { date: string}) {  

    const [companyName, setCompanyName] = useState("");
    const [scheduleData, setScheduleData] = useState<any[]>([]);

  async function fetchSchedule() {
    
    try {
      // fetch data from api
      const res: any = await axios.get(
          apiRoutes.plans.getSchedules,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem(jwtToken)}`,
          },
        }
      );
      const data = res.data.map((d: any) => ({
        collectionStartTime: d.collectionStartTime,
        durationForCollection: d.durationForCollection,
        numberOfLaborers: d.numberOfLaborers,
        numberOfVans: d.numberOfVans,
        expectedWaste: d.expectedWaste,        
      }));
      setCompanyName(res?.data[0]?.Contractor?.companyName);
      setScheduleData(data);
      console.log(data, companyName);
    } catch (error: any) {
      message.error(error?.response?.data?.message || error);
    }
  }

    useEffect(() => {
        fetchSchedule();
    }, []);
    



  return (
    <>
      {scheduleData[0] ? (
        <div className="flex flex-col items-center justify-center w-full text-center">
          <h1 className={`font-bold text-2xl text-[#1A4D2E] mb-[-7px]`}>EcoSync</h1>
          <h6 className="italic text-md mt-2">Date: {date} </h6>
          <h2 className="font-bold text-2xl"> SCHEDULE FOR WASTE TRANSFER </h2>
          <h3 className="font-semibold text-lg mb-4"> {companyName} </h3>
          <Table>
            <TableCaption>
              Schedule of {companyName} for {date}.
            </TableCaption>
            <TableHeader className="bg-slate-100 font-bold text-black text-md">
              <TableRow>
                <TableHead className="text-center">Start Time</TableHead>
                <TableHead className="text-center">Collection Duration</TableHead>
                <TableHead className="text-center">Employee Count</TableHead>
                <TableHead className="text-center">Van Count</TableHead>
                <TableHead className="text-center">Expected Waste</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {scheduleData.map((data, i) => (
                <TableRow key={i} className="text-center">
                  <TableCell>{new Date(data.collectionStartTime).toLocaleString()}</TableCell>
                  <TableCell>{data.durationForCollection}</TableCell>
                  <TableCell>{data.numberOfLaborers}</TableCell>
                  <TableCell>{data.numberOfVans}</TableCell>
                  <TableCell>{data.expectedWaste}</TableCell>                  
                </TableRow>
              ))}
            </TableBody>
            <TableFooter>
              <TableRow>
                <TableCell colSpan={5} className="text-right font-bold">
                  Total Employee :{" "}
                </TableCell>
                <TableCell>
                  {scheduleData.reduce(
                    (total, data) => total + parseInt(data.numberOfLaborers),
                    0
                  )}{" "}
                  Persons
                </TableCell>
              </TableRow>
            </TableFooter>
          </Table>
        </div>
      ) : (
        <EmptyFillContainer className="flex justify-center items-center text-2xl font-bold text-center flex-col gap-5 min-h-96 bg">
          No schedule generated by Contractor Manager for {companyName} on {date}.          
        </EmptyFillContainer>
      )}
    </>
  );
}
